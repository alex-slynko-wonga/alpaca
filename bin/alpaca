#!/usr/bin/env ruby
require 'gli'
require 'alpaca'

module Alpaca
  # The *GliWrapper* module provides command
  # line interface by using GLI::App
  module GliWrapper
    include GLI::App
    extend self

    program_desc 'is a build tool for Visual Studio and Unity3D solutions'
    subcommand_option_handling :normal
    arguments :strict
    gem_path = File.join(File.expand_path(File.dirname(__FILE__)), '..')
    version Versioning.parse(File.join(gem_path, '.semver')).to_s

    on_error do |exception|
      puts exception.backtrace
      true
    end

    desc 'Solutions search pattern'
    default_value ['**/*.sln', '**/Assets']
    flag [:p, :pattern]

    # desc 'Report to gerrit review'
    # default_value false
    # switch :g, :gerrit

    desc 'Compile solution[s]'
    long_desc 'Compiling each solution founded from pattern in global options'
    command :compile do |command|
      command.desc 'Build solution in Debug mode'
      command.switch :d, :debug

      command.action do |global, options, _|
        Application.new.compile(global[:p], options[:d] || false)
      end
    end

    desc 'Test solution[s]'
    long_desc 'Testing each solution founded from pattern in global options'
    command :test do |command|
      command.desc 'Test solution in Debug mode'
      command.switch :d, :debug, negatable: false

      command.desc 'Run tests with coverage'
      command.switch [:c, :coverage]

      command.desc 'Test category'
      command.default_value 'all'
      command.flag :t, :type, :category

      command.action do |global, options, _|
        Application.new.test(global[:p],
                             options[:d] || false,
                             options[:c] || false,
                             options[:t])
      end
    end

    desc 'Generate reports for solution[s]'
    long_desc 'Generate reports for all founded results for solutions'
    command :report do |command|
      command.desc 'Report category'
      command.default_value 'all'
      command.flag :c, :category

      command.action do |global, options, _|
        Application.new.report(global[:p], options[:c])
      end
    end

    desc 'Create packages for solution[s]'
    long_desc 'Create new packages for solutions'
    command :pack do |command|
      command.action do |global, _, _|
        Application.new.pack(global[:p])
      end
    end

    desc 'Release packages for solution[s]'
    long_desc 'Update package to release version and push it'
    command :release do |command|
      command.desc 'Push to the source after released'
      command.switch :p, :push, default_value: true

      command.action do |global, options, _|
        Application.new.release(global[:p], options[:p])
      end
    end

    desc 'Push generated packages for solution[s]'
    long_desc 'Pushes last generated packages for all founded solutions'
    command :push do |command|
      command.desc 'Force push without checks if it has new changes'
      command.switch :f, :force

      command.action do |global, options, _|
        Application.new.push(global[:p], options[:f])
      end
    end

    desc 'Configure alpaca to your needs'
    long_desc 'Save configuration into local/global conf files
      for further usage'
    command :configure do |command|
      command.desc 'configure solution[s] from global pattern'
      command.arg_name 'node1.node2.property=value', :multiple
      command.command :local do |subcommand|
        subcommand.action do |global, _, arguments|
          Application.new.configure_local(global[:p], arguments)
        end
      end

      command.desc 'configure alpaca in user wide sence'
      command.arg_name 'node1.node2.property=value', :multiple
      command.command :global do |subcommand|
        subcommand.action do |_, _, arguments|
          Application.new.configure_global(arguments)
        end
      end
    end
  end
end

exit Alpaca::GliWrapper.run(ARGV)
